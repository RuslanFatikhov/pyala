# app/services/product_service.py
import csv
import os
import threading
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
import uuid

class ProductService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Å –∞–≤—Ç–æ–ø–æ–∏—Å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.csv_path = os.getenv('CSV_PRODUCTS_PATH', './data/products.csv')
        self._cache = {}
        self._categories_cache = set()
        self._lock = threading.RLock()
        self._load_products()
    
    def find_product_images(self, sku: str, max_images: int = 10) -> List[str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU
        –ò—â–µ—Ç —Ñ–∞–π–ª—ã –≤–∏–¥–∞: SKU_1.jpg, SKU_2.jpg, ..., SKU_10.jpg
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
        """
        if not sku:
            return ['/static/img/goods/no-image.jpg']
        
        images = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if current_app:
            goods_path = os.path.join(current_app.static_folder, 'img', 'goods')
        else:
            # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Flask –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            goods_path = './app/static/img/goods'
        
        if not os.path.exists(goods_path):
            return ['/static/img/goods/no-image.jpg']
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        try:
            all_files = os.listdir(goods_path)
        except OSError:
            return ['/static/img/goods/no-image.jpg']
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É SKU_X.jpg (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        sku_lower = sku.lower()
        for i in range(1, max_images + 1):
            target_filename = f"{sku_lower}_{i}.jpg"
            
            # –ò—â–µ–º —Ñ–∞–π–ª —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
            found_file = None
            for filename in all_files:
                if filename.lower() == target_filename:
                    found_file = filename
                    break
            
            if found_file:
                images.append(f'/static/img/goods/{found_file}')
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not images:
            return ['/static/img/goods/no-image.jpg']
        
        return images
    
    def get_product_main_image(self, sku: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        images = self.find_product_images(sku, max_images=1)
        return images[0] if images else '/static/img/goods/no-image.jpg'
    
    def _load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV –≤ –∫—ç—à (–ë–ï–ó –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ images)"""
        with self._lock:
            products = {}
            categories = set()
            
            if not os.path.exists(self.csv_path):
                print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.csv_path}")
                self._cache = products
                self._categories_cache = categories
                return
            
            try:
                with open(self.csv_path, 'r', encoding='utf-8') as file:
                    reader = csv.DictReader(file)
                    print(f"üîç DEBUG: –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV: {reader.fieldnames}")
                    
                    row_count = 0
                    for row in reader:
                        row_count += 1
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è SKU
                        sku = row.get('sku', '').strip()
                        if not sku:
                            print(f"‚ö†Ô∏è  DEBUG: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_count} - –ø—É—Å—Ç–æ–π SKU")
                            continue
                        
                        try:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω
                            price_str = row.get('price', '0').strip()
                            price = int(price_str) if price_str else 0
                            
                            old_price_str = row.get('old_price', '').strip()
                            old_price = int(old_price_str) if old_price_str else None
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏)
                            stock_str = row.get('stock', '0').strip()
                            stock = int(stock_str) if stock_str else 0
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                            is_active_str = row.get('is_active', '1').strip()
                            is_active = is_active_str in ('1', 'true', 'True', 'yes', 'Yes')
                            
                            # –í–ê–ñ–ù–û: –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–æ–Ω–∫–∏ images - —Ç–µ–ø–µ—Ä—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—â—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                            
                            product = {
                                'sku': sku,
                                'title': row.get('title', '').strip(),
                                'price': price,
                                'old_price': old_price,
                                'category': row.get('category', '').strip(),
                                'volume_ml': row.get('volume_ml', '').strip(),
                                'color': row.get('color', '').strip(),
                                'images': self.find_product_images(sku),  # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                                'stock': stock,
                                'is_active': is_active,
                                'description': row.get('description', '').strip()
                            }
                            
                            products[sku] = product
                            print(f"‚úÖ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä {sku}: {product['title']} (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product['images'])})")
                            
                            if product['category']:
                                categories.add(product['category'])
                                
                        except (ValueError, TypeError) as e:
                            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {e}")
                            continue
                
                self._cache = products
                self._categories_cache = categories
                print(f"üì¶ DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}, –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                
            except Exception as e:
                print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
                import traceback
                traceback.print_exc()
    
    def invalidate_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"""
        self._load_products()
    
    def get_all_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        with self._lock:
            result = [p for p in self._cache.values() if p['is_active']]
            print(f"üîç DEBUG: get_all_products –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {len(result)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(self._cache)} –≤—Å–µ–≥–æ")
            return result
    
    def get_product_by_sku(self, sku: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU"""
        with self._lock:
            product = self._cache.get(sku)
            if product and product['is_active']:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ (–Ω–∞ —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤)
                product['images'] = self.find_product_images(sku)
                return product
            return None
    
    def search_products(self, query: str = '', category: str = '', 
                       price_min: int = None, price_max: int = None) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        products = self.get_all_products()
        
        if not query and not category and price_min is None and price_max is None:
            return products
        
        result = []
        query_lower = query.lower() if query else ''
        
        for product in products:
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category and product.get('category', '').lower() != category.lower():
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if price_min is not None and product['price'] < price_min:
                continue
            if price_max is not None and product['price'] > price_max:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if query_lower:
                searchable_text = ' '.join([
                    product.get('title', ''),
                    product.get('description', ''),
                    product.get('sku', ''),
                    product.get('color', ''),
                    product.get('category', '')
                ]).lower()
                
                if query_lower not in searchable_text:
                    continue
            
            result.append(product)
        
        return result
    
    def get_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        with self._lock:
            return sorted(list(self._categories_cache))
    
    def get_featured_products(self, limit: int = 6) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        products = self.get_all_products()
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ featured —Ç–æ–≤–∞—Ä–æ–≤
        return products[:limit]
    def __init__(self, csv_path: str):
        self.csv_path = csv_path
        self.cache = {}
        self.last_modified = 0
        self.lock = threading.RLock()
        self._load_products()
    
    def _load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV –≤ –∫—ç—à"""
        with self.lock:
            try:
                if not os.path.exists(self.csv_path):
                    self.cache = {}
                    return
                
                current_modified = os.path.getmtime(self.csv_path)
                if current_modified <= self.last_modified and self.cache:
                    return
                
                products = {}
                with open(self.csv_path, 'r', encoding='utf-8') as file:
                    reader = csv.DictReader(file)
                    for row in reader:
                        sku = row.get('sku', '').strip()
                        if sku:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
                            try:
                                row['price'] = float(row.get('price', 0))
                            except (ValueError, TypeError):
                                row['price'] = 0.0
                            
                            try:
                                row['old_price'] = float(row.get('old_price', 0)) if row.get('old_price') else None
                            except (ValueError, TypeError):
                                row['old_price'] = None
                            
                            try:
                                row['stock'] = int(row.get('stock', 0))
                            except (ValueError, TypeError):
                                row['stock'] = 0
                            
                            # is_active –∫–∞–∫ boolean
                            row['is_active'] = str(row.get('is_active', '1')).strip() == '1'
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö | –∏–ª–∏ ,)
                            images_str = row.get('images', '')
                            if images_str:
                                if '|' in images_str:
                                    row['images'] = [img.strip() for img in images_str.split('|') if img.strip()]
                                else:
                                    row['images'] = [img.strip() for img in images_str.split(',') if img.strip()]
                            else:
                                row['images'] = []
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ volume_ml
                            try:
                                volume = row.get('volume_ml', '')
                                row['volume_ml'] = int(volume) if volume else None
                            except (ValueError, TypeError):
                                row['volume_ml'] = None
                            
                            products[sku] = row
                
                self.cache = products
                self.last_modified = current_modified
                logging.info(f"Loaded {len(products)} products")
                
            except Exception as e:
                logging.error(f"Error loading products: {e}")
                self.cache = {}
    
    def _save_products(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫—ç—à–∞ –≤ CSV"""
        with self.lock:
            try:
                if not self.cache:
                    return True
                
                # –ü–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π –∫–∞–∫ –≤ –≤–∞—à–µ–º CSV
                fieldnames = ['sku', 'title', 'price', 'old_price', 'category', 
                             'volume_ml', 'color', 'images', 'stock', 'is_active', 
                             'date_added', 'description']
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
                if os.path.exists(self.csv_path):
                    backup_path = f"{self.csv_path}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    os.rename(self.csv_path, backup_path)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                with open(self.csv_path, 'w', newline='', encoding='utf-8') as file:
                    writer = csv.DictWriter(file, fieldnames=fieldnames)
                    writer.writeheader()
                    
                    for sku in sorted(self.cache.keys()):
                        product = self.cache[sku].copy()
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏
                        if 'images' in product and isinstance(product['images'], list):
                            product['images'] = '|'.join(product['images'])
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º boolean –≤ —Å—Ç—Ä–æ–∫—É
                        if 'is_active' in product:
                            product['is_active'] = '1' if product['is_active'] else '0'
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        for field in fieldnames:
                            if field not in product:
                                product[field] = ''
                            elif product[field] is None:
                                product[field] = ''
                        
                        writer.writerow(product)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.last_modified = os.path.getmtime(self.csv_path)
                logging.info(f"Saved {len(self.cache)} products to CSV")
                return True
                
            except Exception as e:
                logging.error(f"Error saving products: {e}")
                return False
    
    def get_all_products(self, reload=False) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        if reload:
            self._load_products()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
            if os.path.exists(self.csv_path):
                current_modified = os.path.getmtime(self.csv_path)
                if current_modified > self.last_modified:
                    self._load_products()
        
        with self.lock:
            return list(self.cache.values())
    
    def get_product_by_sku(self, sku: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ SKU"""
        self.get_all_products()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        with self.lock:
            return self.cache.get(sku)
    
    def create_product(self, product_data: Dict) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            with self.lock:
                sku = product_data.get('sku', '').strip()
                if not sku:
                    return False
                
                if sku in self.cache:
                    return False  # –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                new_product = self._prepare_product_data(product_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if not new_product.get('date_added'):
                    new_product['date_added'] = datetime.now().strftime('%Y-%m-%d')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                self.cache[sku] = new_product
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                return self._save_products()
                
        except Exception as e:
            logging.error(f"Error creating product: {e}")
            return False
    
    def update_product(self, sku: str, product_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            with self.lock:
                if sku not in self.cache:
                    return False  # –¢–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                original_product = self.cache[sku].copy()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                updated_product = self._prepare_product_data(product_data)
                updated_product['sku'] = sku  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SKU
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –µ—Å–ª–∏ –±—ã–ª–∞
                if 'date_added' in original_product and not updated_product.get('date_added'):
                    updated_product['date_added'] = original_product['date_added']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫—ç—à–µ
                self.cache[sku] = updated_product
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                return self._save_products()
                
        except Exception as e:
            logging.error(f"Error updating product {sku}: {e}")
            return False
    
    def delete_product(self, sku: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            with self.lock:
                if sku not in self.cache:
                    return False  # –¢–æ–≤–∞—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
                del self.cache[sku]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                return self._save_products()
                
        except Exception as e:
            logging.error(f"Error deleting product {sku}: {e}")
            return False
    
    def _prepare_product_data(self, data: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        product = {}
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        product['sku'] = data.get('sku', '').strip()
        product['title'] = data.get('title', '').strip()
        product['description'] = data.get('description', '').strip()
        product['category'] = data.get('category', '').strip()
        
        # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
        try:
            product['price'] = float(data.get('price', 0))
        except (ValueError, TypeError):
            product['price'] = 0.0
        
        try:
            old_price = data.get('old_price')
            product['old_price'] = float(old_price) if old_price else None
        except (ValueError, TypeError):
            product['old_price'] = None
        
        try:
            product['stock'] = int(data.get('stock', 0))
        except (ValueError, TypeError):
            product['stock'] = 0
        
        try:
            volume = data.get('volume_ml')
            product['volume_ml'] = int(volume) if volume else None
        except (ValueError, TypeError):
            product['volume_ml'] = None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        product['color'] = data.get('color', '').strip()
        product['date_added'] = data.get('date_added', '').strip()
        
        # Boolean –ø–æ–ª—è
        is_active = data.get('is_active')
        if isinstance(is_active, str):
            product['is_active'] = is_active.lower() in ['1', 'true', 'yes', 'on']
        else:
            product['is_active'] = bool(is_active)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = data.get('images', '')
        if isinstance(images, str):
            if '|' in images:
                product['images'] = [img.strip() for img in images.split('|') if img.strip()]
            else:
                product['images'] = [img.strip() for img in images.split(',') if img.strip()]
        elif isinstance(images, list):
            product['images'] = [str(img).strip() for img in images if str(img).strip()]
        else:
            product['images'] = []
        
        return product
    
    def search_products(self, query: str = '', category: str = '', 
                       price_min: float = None, price_max: float = None,
                       only_active: bool = True) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        products = self.get_all_products()
        result = []
        
        query_lower = query.lower() if query else ''
        
        for product in products:
            # –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if only_active and not product.get('is_active', True):
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            if query_lower:
                searchable_text = (
                    product.get('title', '') + ' ' +
                    product.get('description', '') + ' ' +
                    product.get('sku', '') + ' ' +
                    product.get('color', '') + ' ' +
                    product.get('category', '')
                ).lower()
                
                if query_lower not in searchable_text:
                    continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category and product.get('category', '').lower() != category.lower():
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            price = product.get('price', 0)
            if price_min is not None and price < price_min:
                continue
            if price_max is not None and price > price_max:
                continue
            
            result.append(product)
        
        return result
    
    def get_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        products = self.get_all_products()
        categories = set()
        for product in products:
            category = product.get('category', '').strip()
            if category:
                categories.add(category)
        return sorted(categories)
    
    def get_products_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        return len(self.get_all_products())
    
    def get_active_products_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        products = self.get_all_products()
        return sum(1 for p in products if p.get('is_active', True))
    
    def get_featured_products(self, limit: int = 6) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        products = self.get_all_products()
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        active_products = [p for p in products if p.get('is_active', True)]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        active_products.sort(
            key=lambda x: x.get('date_added', ''), 
            reverse=True
        )
        
        return active_products[:limit]
    
    def generate_sku(self, title: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SKU –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã —Å–ª–æ–≤
        words = title.upper().split()
        base = ''.join(word[:3] for word in words[:3])
        
        if not base:
            base = "PROD"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Å—É—Ñ—Ñ–∏–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        counter = 1
        sku = f"{base}-{counter:03d}"
        while sku in self.cache:
            counter += 1
            sku = f"{base}-{counter:03d}"
        
        return sku
    
    def validate_product_data(self, data: Dict, current_sku: str = None) -> Dict[str, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞"""
        errors = {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SKU
        new_sku = data.get('sku', '').strip()
        if not new_sku:
            errors['sku'] = 'SKU –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        elif new_sku != current_sku and new_sku in self.cache:
            errors['sku'] = '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
        if not data.get('title', '').strip():
            errors['title'] = '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        try:
            price = float(data.get('price', 0))
            if price < 0:
                errors['price'] = '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'
        except (ValueError, TypeError):
            errors['price'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã
        old_price = data.get('old_price')
        if old_price:
            try:
                old_price_float = float(old_price)
                if old_price_float < 0:
                    errors['old_price'] = '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'
            except (ValueError, TypeError):
                errors['old_price'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞
        try:
            stock = int(data.get('stock', 0))
            if stock < 0:
                errors['stock'] = '–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'
        except (ValueError, TypeError):
            errors['stock'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–º–∞
        volume_ml = data.get('volume_ml')
        if volume_ml:
            try:
                volume = int(volume_ml)
                if volume < 0:
                    errors['volume_ml'] = '–û–±—ä–µ–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'
            except (ValueError, TypeError):
                errors['volume_ml'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º'
        
        return errors