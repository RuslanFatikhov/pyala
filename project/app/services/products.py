import csv
import os
import threading
from typing import List, Dict, Tuple, Optional

class ProductService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.csv_path = os.getenv('CSV_PRODUCTS_PATH', './data/products.csv')
        self._cache = {}
        self._categories_cache = set()
        self._lock = threading.RLock()
        self._load_products()
    
    def _load_products(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ CSV –≤ –∫—ç—à"""
        with self._lock:
            try:
                products = {}
                categories = set()
                
                print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –∏–∑ {self.csv_path}, —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(self.csv_path)}")
                
                if not os.path.exists(self.csv_path):
                    self._cache = products
                    self._categories_cache = categories
                    return
                
                with open(self.csv_path, 'r', encoding='utf-8') as f:
                    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    content = f.read()
                    print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ CSV:\n{content[:200]}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞
                    f.seek(0)
                    
                    reader = csv.DictReader(f)
                    print(f"üîç DEBUG: –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV: {reader.fieldnames}")
                    
                    row_count = 0
                    for row in reader:
                        row_count += 1
                        print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É {row_count}: {row}")
                        
                        try:
                            sku = row.get('sku', '').strip()
                            if not sku:
                                print(f"‚ö†Ô∏è DEBUG: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {row_count} - –Ω–µ—Ç SKU")
                                continue
                            
                            price = float(row.get('price', 0))
                            old_price = row.get('old_price', '')
                            old_price = float(old_price) if old_price else None
                            
                            stock = int(row.get('stock', 0))
                            is_active = row.get('is_active', '0') == '1'
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            images = row.get('images', '').split('|')
                            images = [img.strip() for img in images if img.strip()]
                            
                            product = {
                                'sku': sku,
                                'title': row.get('title', '').strip(),
                                'price': price,
                                'old_price': old_price,
                                'category': row.get('category', '').strip(),
                                'volume_ml': row.get('volume_ml', '').strip(),
                                'color': row.get('color', '').strip(),
                                'images': images,
                                'stock': stock,
                                'is_active': is_active,
                                'description': row.get('description', '').strip()
                            }
                            
                            products[sku] = product
                            print(f"‚úÖ DEBUG: –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä {sku}: {product['title']}")
                            
                            if product['category']:
                                categories.add(product['category'])
                                
                        except (ValueError, TypeError) as e:
                            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {e}")
                            continue
                
                self._cache = products
                self._categories_cache = categories
                print(f"üì¶ DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}, –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                
            except Exception as e:
                print(f"‚ùå DEBUG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
                import traceback
                traceback.print_exc()
    
    def invalidate_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"""
        self._load_products()
    
    def get_all_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        with self._lock:
            result = [p for p in self._cache.values() if p['is_active']]
            print(f"üîç DEBUG: get_all_products –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {len(result)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {len(self._cache)} –≤—Å–µ–≥–æ")
            return result
    
    def get_product_by_sku(self, sku: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ SKU"""
        with self._lock:
            product = self._cache.get(sku)
            print(f"üîç DEBUG: get_product_by_sku({sku}) = {product is not None}")
            return product
    
    def get_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        with self._lock:
            return sorted(list(self._categories_cache))
    
    def get_featured_products(self, limit: int = 6) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π"""
        products = self.get_all_products()
        result = products[:limit]
        print(f"üîç DEBUG: get_featured_products –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {len(result)} —Ç–æ–≤–∞—Ä–æ–≤")
        for p in result:
            print(f"  - SKU: {p.get('sku')}, Title: {p.get('title')}")
        return result
    
    def get_filtered_products(self, category: str = '', query: str = '', 
                            price_min: Optional[int] = None, price_max: Optional[int] = None,
                            page: int = 1, per_page: int = 12) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        products = self.get_all_products()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if category:
            products = [p for p in products if p['category'].lower() == category.lower()]
        
        if query:
            query_lower = query.lower()
            products = [p for p in products 
                       if query_lower in p['title'].lower() or 
                          query_lower in p['description'].lower()]
        
        if price_min is not None:
            products = [p for p in products if p['price'] >= price_min]
        
        if price_max is not None:
            products = [p for p in products if p['price'] <= price_max]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(products)
        total_pages = (total + per_page - 1) // per_page
        
        start = (page - 1) * per_page
        end = start + per_page
        products = products[start:end]
        
        return products, total_pages
    
    def get_products_count(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        with self._lock:
            return len(self._cache)
    
    def get_active_products_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return len(self.get_all_products())