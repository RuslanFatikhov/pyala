### app/services/products.py
import csv
import os
import threading
from typing import List, Dict, Tuple, Optional

class ProductService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.csv_path = os.getenv('CSV_PRODUCTS_PATH', './data/products.csv')
        self._cache = {}
        self._categories_cache = set()
        self._lock = threading.RLock()
        self._load_products()
    
    
    def _load_products(self):
        print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –∏–∑ {self.csv_path}, —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(self.csv_path)}")
        print(f"üîç DEBUG: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV –∏–∑: {self.csv_path}")
        print(f"üîç DEBUG: –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? {os.path.exists(self.csv_path)}")
        print(f"üîç DEBUG: –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

        try:
            if not os.path.exists(self.csv_path):
                print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.csv_path}")
                return

            with open(self.csv_path, 'r', encoding='utf-8') as f:
                content = f.read()
                print(f"üîç DEBUG: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}")

            with open(self.csv_path, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f, delimiter=';')
                print(f"üîç DEBUG: –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV: {reader.fieldnames}")

                products_count = 0
                self._cache.clear()
                self._categories_cache.clear()
                for row in reader:
                    products_count += 1
                    print(f"üîç DEBUG: –°—Ç—Ä–æ–∫–∞ {products_count}: {row}")
                    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫—ç—à–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    sku = row.get('sku')
                    if sku:
                        self._cache[sku] = {
                            'sku': sku,
                            'title': row.get('title', ''),
                            'description': row.get('description', ''),
                            'category': row.get('category', ''),
                            'price': int(row.get('price', '0')),
                            'is_active': row.get('is_active', '1') == '1'
                        }
                        self._categories_cache.add(row.get('category', ''))

                print(f"üîç DEBUG: –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {products_count}")
                print(f"üîç DEBUG: –¢–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {len(self._cache)}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV: {e}")
            import traceback
            traceback.print_exc()

    def invalidate_cache(self):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞"""
        self._load_products()
    
    def get_all_products(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        with self._lock:
            return [p for p in self._cache.values() if p['is_active']]
    
    def get_product_by_sku(self, sku: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ SKU"""
        with self._lock:
            return self._cache.get(sku)
    
    def get_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        with self._lock:
            return sorted(list(self._categories_cache))
    
    def get_featured_products(self, limit: int = 6) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π"""
        products = self.get_all_products()
        return products[:limit]
    
    def get_filtered_products(self, category: str = '', query: str = '', 
                            price_min: Optional[int] = None, price_max: Optional[int] = None,
                            page: int = 1, per_page: int = 12) -> Tuple[List[Dict], int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        products = self.get_all_products()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if category:
            products = [p for p in products if p['category'].lower() == category.lower()]
        
        if query:
            query_lower = query.lower()
            products = [p for p in products 
                       if query_lower in p['title'].lower() or 
                          query_lower in p['description'].lower()]
        
        if price_min is not None:
            products = [p for p in products if p['price'] >= price_min]
        
        if price_max is not None:
            products = [p for p in products if p['price'] <= price_max]
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(products)
        total_pages = (total + per_page - 1) // per_page
        
        start = (page - 1) * per_page
        end = start + per_page
        products = products[start:end]
        
        return products, total_pages
    
    def get_products_count(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        with self._lock:
            return len(self._cache)
    
    def get_active_products_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        return len(self.get_all_products())

class OrderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    
    def __init__(self):
        self.orders = []  # –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ—Ç –ë–î
    
    def get_all_orders(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"""
        return self.orders
    
    def get_order_by_id(self, order_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID"""
        for order in self.orders:
            if order.get('id') == order_id:
                return order
        return None
    
    def create_order(self, order_data):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        order_id = len(self.orders) + 1
        order_data['id'] = order_id
        order_data['status'] = 'pending'
        self.orders.append(order_data)
        return order_data
    
    def update_order_status(self, order_id, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        order = self.get_order_by_id(order_id)
        if order:
            order['status'] = status
            return True
        return False