#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏
"""
import sys
import os
sys.path.append('.')

def test_direct_service_calls():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ HTTP"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–û–í –ù–ê–ü–†–Ø–ú–£–Æ")
    print("=" * 50)
    
    try:
        from app.services.product_service import ProductService
        
        service = ProductService()
        
        # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:")
        products = service.get_all_products()
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        if products:
            print("   ‚úÖ –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            for i, product in enumerate(products[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   {i+1}. {product.get('sku')} - {product.get('title')} - {product.get('price')}‚ÇΩ")
        else:
            print("   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
        test_product_data = {
            'sku': 'CLI-TEST-001',
            'title': 'CLI –¢–µ—Å—Ç–æ–≤–∞—è –ø–∏–∞–ª–∞',
            'description': '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'category': '–ø–∏–∞–ª—ã',
            'price': '5990',
            'stock': '10',
            'is_active': True,
            'color': '–±–µ–ª—ã–π',
            'volume_ml': '90'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        errors = service.validate_product_data(test_product_data)
        if errors:
            print(f"   ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {errors}")
            return False
        
        # –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä
        success = service.create_product(test_product_data)
        if success:
            print("   ‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            return False
        
        # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
        found_product = service.get_product_by_sku('CLI-TEST-001')
        if found_product:
            print(f"   ‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {found_product.get('title')}")
        else:
            print("   ‚ùå –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç 4: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
        updated_data = test_product_data.copy()
        updated_data['title'] = 'CLI –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–∏–∞–ª–∞'
        updated_data['price'] = '6990'
        
        edit_errors = service.validate_product_data(updated_data, 'CLI-TEST-001')
        if edit_errors:
            print(f"   ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {edit_errors}")
            return False
        
        edit_success = service.update_product('CLI-TEST-001', updated_data)
        if edit_success:
            print("   ‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            updated_product = service.get_product_by_sku('CLI-TEST-001')
            if updated_product and updated_product.get('title') == 'CLI –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–∏–∞–ª–∞':
                print("   ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("   ‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
                return False
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            return False
        
        # –¢–µ—Å—Ç 5: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:")
        delete_success = service.delete_product('CLI-TEST-001')
        if delete_success:
            print("   ‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            deleted_product = service.get_product_by_sku('CLI-TEST-001')
            if not deleted_product:
                print("   ‚úÖ –¢–æ–≤–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—ë–Ω")
            else:
                print("   ‚ùå –¢–æ–≤–∞—Ä –Ω–µ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
                return False
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_file_operations():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\nüìÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–æ–≤
    products_file = "data/products.csv"
    if os.path.exists(products_file):
        print(f"‚úÖ –§–∞–π–ª {products_file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        try:
            with open(products_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                print(f"   –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(lines)}")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {lines[0].strip()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    else:
        print(f"‚ùå –§–∞–π–ª {products_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    try:
        test_file = "data/test_write.tmp"
        with open(test_file, 'w') as f:
            f.write("test")
        os.remove(test_file)
        print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É data/ –µ—Å—Ç—å")
    except Exception as e:
        print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ø–∞–ø–∫—É data/: {e}")
        return False
    
    return True

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù–ö–ò –¢–û–í–ê–†–û–í (–ü–†–Ø–ú–´–ï –í–´–ó–û–í–´)")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    file_test_success = test_file_operations()
    
    if file_test_success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        service_test_success = test_direct_service_calls()
        
        if service_test_success:
            print("\nüéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return 0
        else:
            print("\n‚ùå –¢–ï–°–¢–´ –°–ï–†–í–ò–°–û–í –ü–†–û–í–ê–õ–ï–ù–´")
            return 1
    else:
        print("\n‚ùå –¢–ï–°–¢–´ –§–ê–ô–õ–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô –ü–†–û–í–ê–õ–ï–ù–´")
        return 1

if __name__ == "__main__":
    sys.exit(main())
