#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
"""
import os
import sys
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BASE_URL = "http://localhost:5000"
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME', 'admin')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD', 'admin')

def test_admin_auth():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω–∫–µ"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    session = requests.Session()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    login_url = f"{BASE_URL}/admin/login"
    try:
        response = session.get(login_url, timeout=5)
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞: {response.status_code}")
        
        if response.status_code != 200:
            print("   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False, None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        login_data = {
            'username': ADMIN_USERNAME,
            'password': ADMIN_PASSWORD
        }
        
        response = session.post(login_url, data=login_data, allow_redirects=False, timeout=5)
        
        if response.status_code in [302, 303]:
            print("   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            return True, session
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            return False, None
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False, None

def test_products_list(session):
    """–¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    try:
        response = session.get(f"{BASE_URL}/admin/products", timeout=5)
        print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            content = response.text
            if '–¢–æ–≤–∞—Ä—ã' in content:
                print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                has_create_button = '–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä' in content or 'products/create' in content
                has_table = '<table' in content or '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' in content
                
                print(f"   –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {'‚úÖ' if has_create_button else '‚ùå'}")
                print(f"   –¢–∞–±–ª–∏—Ü–∞/—Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ' if has_table else '‚ùå'}")
                
                return True
            else:
                print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_product_creation(session):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    print("\n‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_product = {
        'sku': 'CLI-TEST-001',
        'title': 'CLI –¢–µ—Å—Ç–æ–≤–∞—è –ø–∏–∞–ª–∞',
        'description': '–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É',
        'category': '–ø–∏–∞–ª—ã',
        'price': '5990',
        'stock': '10',
        'is_active': 'on'
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è
        create_url = f"{BASE_URL}/admin/products/create"
        response = session.get(create_url, timeout=5)
        
        if response.status_code != 200:
            print(f"   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return False, None
        
        print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        response = session.post(create_url, data=test_product, allow_redirects=False, timeout=5)
        
        if response.status_code in [302, 303]:
            print("   ‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω (–ø–æ–ª—É—á–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç)")
            return True, test_product['sku']
        elif response.status_code == 200:
            # –í–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if 'error-message' in response.text or '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' in response.text:
                print("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                return False, None
            else:
                print("   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏")
                return False, None
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {response.status_code}")
            return False, None
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False, None

def test_product_editing(session, sku):
    """–¢–µ—Å—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    print(f"\n‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {sku}...")
    
    try:
        edit_url = f"{BASE_URL}/admin/products/{sku}/edit"
        response = session.get(edit_url, timeout=5)
        
        if response.status_code != 200:
            print(f"   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return False
        
        print("   ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        updated_data = {
            'sku': sku,
            'title': f'CLI –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ø–∏–∞–ª–∞ {sku}',
            'description': '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É',
            'category': '–ø–∏–∞–ª—ã',
            'price': '6990',  # –ò–∑–º–µ–Ω–∏–ª–∏ —Ü–µ–Ω—É
            'stock': '5',     # –ò–∑–º–µ–Ω–∏–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫
            'is_active': 'on'
        }
        
        response = session.post(edit_url, data=updated_data, allow_redirects=False, timeout=5)
        
        if response.status_code in [302, 303]:
            print("   ‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_product_deletion(session, sku):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    print(f"\nüóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {sku}...")
    
    try:
        delete_url = f"{BASE_URL}/admin/products/{sku}/delete"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX-–∑–∞–ø—Ä–æ—Å
        headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
        
        response = session.post(delete_url, headers=headers, timeout=5)
        
        if response.status_code == 200:
            try:
                result = response.json()
                if result.get('ok'):
                    print("   ‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
            except json.JSONDecodeError:
                print("   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç–≤–µ—Ç")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù–ö–ò –¢–û–í–ê–†–û–í")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
        else:
            print("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
    except requests.exceptions.RequestException:
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    auth_success, session = test_admin_auth()
    if not auth_success:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    list_success = test_products_list(session)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    create_success, created_sku = test_product_creation(session)
    
    if create_success and created_sku:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        edit_success = test_product_editing(session, created_sku)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        delete_success = test_product_deletion(session, created_sku)
    else:
        edit_success = False
        delete_success = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢:")
    print("=" * 50)
    
    results = {
        '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': auth_success,
        '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤': list_success,
        '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': create_success,
        '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': edit_success,
        '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': delete_success,
    }
    
    for test_name, passed in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<20} {status}")
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    
    print("-" * 50)
    print(f"–í–°–ï–ì–û –¢–ï–°–¢–û–í: {total_tests}")
    print(f"–ü–†–û–ô–î–ï–ù–û: {passed_tests}")
    print(f"–ü–†–û–í–ê–õ–ï–ù–û: {total_tests - passed_tests}")
    
    if passed_tests == total_tests:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    exit(main())
